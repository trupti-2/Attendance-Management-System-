<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[function paSPClientController($compile, $element, $scope, $http, $timeout) {
	/* widget controller */
	var c = this;
	
	// Initial message
	c.initialMessageVisible = !Boolean(c.options.widget_id);
	c.initialMessage = c.data.i18n.initialMessage;
	
	// Title
	c.title = '';
	c.showTitle = (c.options.show_title && c.options.show_title !== 'false');
	if (c.options.widget_parameters) {
		var widgetParameters = JSON.parse(c.options.widget_parameters);
		if (typeof widgetParameters.widget_id === 'object')
			c.title = widgetParameters.widget_id.displayValue;
	}
	
	//PA messages
	if (!top.SNC.PA.msg || $.isEmptyObject(top.SNC.PA.msg)) {
		top.SNC.PA.msg = JSON.parse(c.data.i18n.paMsgs);
	}
	
	var httpOptions = {
		url: 'angular.do',
		params: {
			sysparm_type: 'pa_widget',
			type: 'getwidgetserviceportal',
			widget: c.options.widget_id
		}
	};
	$http(httpOptions, true).then(function afterResponse(result) {
		if (!result.data.type || !result.data.sys_id)
			return;
		
		c.initialMessageVisible = false;
		if (c.showTitle)
			c.titleId = result.data.sys_id;
		
		var compiledWidget;
		if (isReactWidget(result.data.type, result.data.newVisualizationEnabled)) {
			// Text Analytics Widget is in React
			c.widgetId = result.data.sys_id;
			c.uuid = result.data.uuid;
			c.reactComponent = true;
			c.lang = c.data.language;
			c.dow = c.data.dow;
			c.cutoffValue = result.data.text_cut_off_value;
			c.cutoffType = result.data.text_cut_off_type;
			c.cutoffCondition = result.data.text_cut_off_condition;
			c.defaultField = result.data.text_default_field;
			c.textLimit = result.data.text_limit;
			c.visualization = result.data.visualization;
			c.textWordsInTrendline = result.data.text_words_in_trendline;
			c.type = result.data.type;
			c.insightsEnabled = result.data.insightsEnabled;
			switch(c.type) {
				case 'text': c.widgetRoute = '/widgets/text-analytics'; break;
				case 'insight': c.widgetRoute = '/widgets/insights'; break;
				case 'time': c.widgetRoute = '/widgets/time-series'; break;
				case 'score': c.widgetRoute = '/widgets/single-score'; break;
				default: c.widgetRoute = '/widgets/text-analytics'; break;
			}
			
			$timeout(function afterAngularRender() {
				var element = angular.element('pa-react-wrapper', $element).get(0);
				window.servicePortalPaUIWidget.render(element);
			});
			$scope.$on('$destroy', function onAngularDestroy() {
				var element = angular.element('pa-react-wrapper', $element).get(0);
				window.servicePortalPaUIWidget.destroy(element);
			});
		} else {
			// Will be removed when we switch all widgets to react
			compiledWidget = $compile('<div class="pa-widget-' + result.data.type + '" widget="' + result.data.sys_id + '"></div>')($scope);
			angular.element('.pa-widget-service-portal', $element).append(compiledWidget);
		}
	});
	
	function isReactWidget(type, newVisualizationEnabled) {
		var reactWidgetTypes = ['text', 'insight'];
		if (newVisualizationEnabled) {
			reactWidgetTypes.push('time');
			reactWidgetTypes.push('score');
		}
 		return reactWidgetTypes.indexOf(type) != -1;
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>pa-react-wrapper {&#13;
	height: 750px;&#13;
}&#13;
h2.title-container {&#13;
	font-size: 14px;&#13;
	text-overflow: ellipsis;&#13;
	overflow: hidden;&#13;
	white-space: nowrap;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Copy of Performance Analytics</name>
        <option_schema>[{"displayValue":"Widgets","name":"widget_id","display_value_list":[],"label":"Widget","type":"reference","value":"pa_widgets","ed":{"reference":"pa_widgets"}},{"hint":"","name":"show_title","label":"Show title","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	data.i18n = {
		initialMessage: gs.getMessage('Please select a widget'),
		paMsgs: SNC.PAUtils.getMessages()
	};
	data.language = gs.getSession().getLanguage();
	data.dow = gs.getProperty('glide.ui.date_format.first_day_of_week', 1);
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>truptibidave02</sys_created_by>
        <sys_created_on>2025-03-05 10:46:45</sys_created_on>
        <sys_id>35a28b92c3c4221089cf1c377d013147</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Copy of Performance Analytics</sys_name>
        <sys_package display_value="Attendance Management System" source="x_1596199_attend">e420f18dc32bd61089cf1c377d01311a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Attendance Management System">e420f18dc32bd61089cf1c377d01311a</sys_scope>
        <sys_update_name>sp_widget_35a28b92c3c4221089cf1c377d013147</sys_update_name>
        <sys_updated_by>truptibidave02</sys_updated_by>
        <sys_updated_on>2025-03-05 10:46:45</sys_updated_on>
        <template><![CDATA[<div class="pa-widget-service-portal__parent-container">
	<div class="pa-widget-service-portal" role="group">
		<h2 class="title-container"
			id="{{'title-' + c.titleId}}"
			ng-class="{ show: c.showTitle }">
			{{::c.title}}
		</h2>
		<div class="initial-message-container" ng-class="{ show: c.initialMessageVisible }">
			{{::c.initialMessage}}
		</div>
		<div class="react-component" ng-if="c.reactComponent">
			<pa-react-wrapper
				type="{{::c.widgetRoute}}"
				uuid="{{::c.uuid}}"
				widget-id="{{::c.widgetId}}"
				lang={{::c.lang}}
				dow={{::c.dow}}
				visualization={{::c.visualization}}
				insights-Enabled={{::c.insightsEnabled}}
				text-cutoff-value={{::c.cutoffValue}}
				text-cutoff-type={{::c.cutoffType}}
				text-cutoff-condition={{::c.cutoffCondition}}
				text-limit={{::c.textLimit}}
				text-default-field={{::c.defaultField}}
				text-words-trendline-limit={{::c.textWordsInTrendline}}>
			</pa-react-wrapper>
		</div>
	</div>
</div>
<script>
	top.SNC = top.SNC || {};
	top.SNC.PA = top.SNC.PA || {};
	top.SNC.PA.msg = top.SNC.PA.msg || {};
</script>
]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Attendance Management System">e420f18dc32bd61089cf1c377d01311a</application>
        <file_path/>
        <instance_id>d87572e1db854694ebdd2a59139619b7</instance_id>
        <instance_name>dev246141</instance_name>
        <name>sp_widget_35a28b92c3c4221089cf1c377d013147</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;custom&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function paSPClientController($compile, $element, $scope, $http, $timeout) {
	/* widget controller */
	var c = this;
	
	// Initial message
	c.initialMessageVisible = !Boolean(c.options.widget_id);
	c.initialMessage = c.data.i18n.initialMessage;
	
	// Title
	c.title = '';
	c.showTitle = (c.options.show_title &amp;&amp; c.options.show_title !== 'false');
	if (c.options.widget_parameters) {
		var widgetParameters = JSON.parse(c.options.widget_parameters);
		if (typeof widgetParameters.widget_id === 'object')
			c.title = widgetParameters.widget_id.displayValue;
	}
	
	//PA messages
	if (!top.SNC.PA.msg || $.isEmptyObject(top.SNC.PA.msg)) {
		top.SNC.PA.msg = JSON.parse(c.data.i18n.paMsgs);
	}
	
	var httpOptions = {
		url: 'angular.do',
		params: {
			sysparm_type: 'pa_widget',
			type: 'getwidgetserviceportal',
			widget: c.options.widget_id
		}
	};
	$http(httpOptions, true).then(function afterResponse(result) {
		if (!result.data.type || !result.data.sys_id)
			return;
		
		c.initialMessageVisible = false;
		if (c.showTitle)
			c.titleId = result.data.sys_id;
		
		var compiledWidget;
		if (isReactWidget(result.data.type, result.data.newVisualizationEnabled)) {
			// Text Analytics Widget is in React
			c.widgetId = result.data.sys_id;
			c.uuid = result.data.uuid;
			c.reactComponent = true;
			c.lang = c.data.language;
			c.dow = c.data.dow;
			c.cutoffValue = result.data.text_cut_off_value;
			c.cutoffType = result.data.text_cut_off_type;
			c.cutoffCondition = result.data.text_cut_off_condition;
			c.defaultField = result.data.text_default_field;
			c.textLimit = result.data.text_limit;
			c.visualization = result.data.visualization;
			c.textWordsInTrendline = result.data.text_words_in_trendline;
			c.type = result.data.type;
			c.insightsEnabled = result.data.insightsEnabled;
			switch(c.type) {
				case 'text': c.widgetRoute = '/widgets/text-analytics'; break;
				case 'insight': c.widgetRoute = '/widgets/insights'; break;
				case 'time': c.widgetRoute = '/widgets/time-series'; break;
				case 'score': c.widgetRoute = '/widgets/single-score'; break;
				default: c.widgetRoute = '/widgets/text-analytics'; break;
			}
			
			$timeout(function afterAngularRender() {
				var element = angular.element('pa-react-wrapper', $element).get(0);
				window.servicePortalPaUIWidget.render(element);
			});
			$scope.$on('$destroy', function onAngularDestroy() {
				var element = angular.element('pa-react-wrapper', $element).get(0);
				window.servicePortalPaUIWidget.destroy(element);
			});
		} else {
			// Will be removed when we switch all widgets to react
			compiledWidget = $compile('&lt;div class="pa-widget-' + result.data.type + '" widget="' + result.data.sys_id + '"&gt;&lt;/div&gt;')($scope);
			angular.element('.pa-widget-service-portal', $element).append(compiledWidget);
		}
	});
	
	function isReactWidget(type, newVisualizationEnabled) {
		var reactWidgetTypes = ['text', 'insight'];
		if (newVisualizationEnabled) {
			reactWidgetTypes.push('time');
			reactWidgetTypes.push('score');
		}
 		return reactWidgetTypes.indexOf(type) != -1;
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;pa-react-wrapper {&amp;#13;
	height: 750px;&amp;#13;
}&amp;#13;
h2.title-container {&amp;#13;
	font-size: 14px;&amp;#13;
	text-overflow: ellipsis;&amp;#13;
	overflow: hidden;&amp;#13;
	white-space: nowrap;&amp;#13;
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id/&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;Copy of Performance Analytics&lt;/name&gt;&lt;option_schema&gt;[{"displayValue":"Widgets","name":"widget_id","display_value_list":[],"label":"Widget","type":"reference","value":"pa_widgets","ed":{"reference":"pa_widgets"}},{"hint":"","name":"show_title","label":"Show title","type":"boolean"}]&lt;/option_schema&gt;&lt;public&gt;false&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
	/* populate the 'data' object */
	data.i18n = {
		initialMessage: gs.getMessage('Please select a widget'),
		paMsgs: SNC.PAUtils.getMessages()
	};
	data.language = gs.getSession().getLanguage();
	data.dow = gs.getProperty('glide.ui.date_format.first_day_of_week', 1);
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;truptibidave02&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2025-03-05 10:46:45&lt;/sys_created_on&gt;&lt;sys_id&gt;35a28b92c3c4221089cf1c377d013147&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;Copy of Performance Analytics&lt;/sys_name&gt;&lt;sys_package display_value="Attendance Management System" source="x_1596199_attend"&gt;e420f18dc32bd61089cf1c377d01311a&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_scope display_value="Attendance Management System"&gt;e420f18dc32bd61089cf1c377d01311a&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_35a28b92c3c4221089cf1c377d013147&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;truptibidave02&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2025-03-05 10:46:45&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="pa-widget-service-portal__parent-container"&gt;
	&lt;div class="pa-widget-service-portal" role="group"&gt;
		&lt;h2 class="title-container"
			id="{{'title-' + c.titleId}}"
			ng-class="{ show: c.showTitle }"&gt;
			{{::c.title}}
		&lt;/h2&gt;
		&lt;div class="initial-message-container" ng-class="{ show: c.initialMessageVisible }"&gt;
			{{::c.initialMessage}}
		&lt;/div&gt;
		&lt;div class="react-component" ng-if="c.reactComponent"&gt;
			&lt;pa-react-wrapper
				type="{{::c.widgetRoute}}"
				uuid="{{::c.uuid}}"
				widget-id="{{::c.widgetId}}"
				lang={{::c.lang}}
				dow={{::c.dow}}
				visualization={{::c.visualization}}
				insights-Enabled={{::c.insightsEnabled}}
				text-cutoff-value={{::c.cutoffValue}}
				text-cutoff-type={{::c.cutoffType}}
				text-cutoff-condition={{::c.cutoffCondition}}
				text-limit={{::c.textLimit}}
				text-default-field={{::c.defaultField}}
				text-words-trendline-limit={{::c.textWordsInTrendline}}&gt;
			&lt;/pa-react-wrapper&gt;
		&lt;/div&gt;
	&lt;/div&gt;
&lt;/div&gt;
&lt;script&gt;
	top.SNC = top.SNC || {};
	top.SNC.PA = top.SNC.PA || {};
	top.SNC.PA.msg = top.SNC.PA.msg || {};
&lt;/script&gt;
]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>26062413</payload_hash>
        <record_name>Copy of Performance Analytics</record_name>
        <reverted_from/>
        <source>2420f18dc32bd61089cf1c377d01311c</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>truptibidave02</sys_created_by>
        <sys_created_on>2025-03-05 10:46:45</sys_created_on>
        <sys_id>b1a24fd2c3c4221089cf1c377d013118</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>19565ea41ac0000001</sys_recorded_at>
        <sys_updated_by>truptibidave02</sys_updated_by>
        <sys_updated_on>2025-03-05 10:46:45</sys_updated_on>
        <type>Widget</type>
        <update_guid>b5a24fd224c42210b7f212b376f96917</update_guid>
        <update_guid_history>b5a24fd224c42210b7f212b376f96917:26062413</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="Copy of Performance Analytics">d07afc8cc3d4221089cf1c377d0131b5</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>truptibidave02</sys_created_by>
        <sys_created_on>2025-03-10 11:21:02</sys_created_on>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>1d59fd34e0914a408814d51860c87240</sys_id>
        <sys_metadata>35a28b92c3c4221089cf1c377d013147</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Copy of Performance Analytics</sys_name>
        <sys_package display_value="Attendance Management System" source="x_1596199_attend">e420f18dc32bd61089cf1c377d01311a</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_scope display_value="Attendance Management System">e420f18dc32bd61089cf1c377d01311a</sys_scope>
        <sys_scope_delete display_value="">3b0cb8ae7917471eb0d03dc020352641</sys_scope_delete>
        <sys_update_name>sp_widget_35a28b92c3c4221089cf1c377d013147</sys_update_name>
        <sys_update_version display_value="sp_widget_35a28b92c3c4221089cf1c377d013147">b1a24fd2c3c4221089cf1c377d013118</sys_update_version>
        <sys_updated_by>truptibidave02</sys_updated_by>
        <sys_updated_on>2025-03-10 11:21:02</sys_updated_on>
    </sys_metadata_delete>
</record_update>
