<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller = function() {
    var c = this;

    // c.searchAttendance = function() {
    //     if (!c.searchDate) {
    //         c.data.filteredRecords = c.data.records; // Show all records if no date is selected
    //         return;
    //     }

    //     var selectedDate = new Date(c.searchDate);
    //     selectedDate.setHours(selectedDate.getHours() + 5, selectedDate.getMinutes() + 30);

    //     var formattedSelectedDate = selectedDate.toISOString().split('T')[0];

    //     c.data.filteredRecords = c.data.records.filter(function(record) {
    //         var recordDate = record.date.split(' ')[0]; // Extract YYYY-MM-DD part
    //         return recordDate === formattedSelectedDate;
    //     });
    // };


    // // Initialize filteredRecords to show all records initially
    // c.data.filteredRecords = c.data.records;
    // c.searchEmployee = function() {
    //     if (!searchEmp) {
    //         c.data.filteredRecords = c.data.records;
    //         retrun;
    //     }
    //     var searchEmpLower = c.searchEmp.toLowerCase();

    //     c.data.filteredRecords = c.data.records.filter(function(record) {
    //         return record.employee.toLowerCase().includes(searchEmpLower);
    //     });

    // };
    c.searchAttendance = function() {
        var selectedDate = c.searchDate ? new Date(c.searchDate) : null;
        if (selectedDate) {
            selectedDate.setHours(selectedDate.getHours() + 5, selectedDate.getMinutes() + 30);
        }
        var formattedSelectedDate = selectedDate ? selectedDate.toISOString().split('T')[0] : null;

        var searchEmpLower = c.searchEmp ? c.searchEmp.toLowerCase() : null;

        c.data.filteredRecords = c.data.records.filter(function(record) {
            var recordDate = (record.date && record.date.includes(' ')) ? record.date.split(' ')[0] : record.date;
            var matchesDate = formattedSelectedDate ? recordDate === formattedSelectedDate : true;
            var matchesEmployee = searchEmpLower ? record.employee.toLowerCase().includes(searchEmpLower) : true;

            return matchesDate && matchesEmployee;
        });
    };

    // Reset Filters Function
    c.resetFilters = function() {
        c.searchDate = null;
        c.searchEmployee = null;
        c.data.filteredRecords = c.data.records;
    };

    // Initialize filteredRecords with all records
    c.data.filteredRecords = c.data.records;
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.table-responsive {&#13;
    margin-top: 20px;&#13;
    padding: 15px;&#13;
    border-radius: 8px;&#13;
    background-color: #f2f2f2;&#13;
}&#13;
&#13;
&#13;
.table-responsive h3 {&#13;
    text-align: center;&#13;
    color: #333;&#13;
    font-size: 42px;&#13;
    margin-bottom: 30px;&#13;
}&#13;
.form-group{&#13;
  display:flex;&#13;
  align-items:center;&#13;
  justify-content:center;&#13;
  gap:5px;&#13;
  &#13;
&#13;
}&#13;
.form-control{&#13;
  width:40%;&#13;
}&#13;
&#13;
.form-group label {&#13;
    font-size: 20px;&#13;
    font-weight: bold;&#13;
    color: black;&#13;
}&#13;
.form-group button{&#13;
    background-color:  #a9c52f;&#13;
    color:white;&#13;
    border-radius:10px;&#13;
    font-weight:bold;&#13;
    font-size:16px;&#13;
}&#13;
&#13;
.form-control {&#13;
    border-radius: 10px;&#13;
    font-size: 10px;&#13;
    &#13;
}&#13;
&#13;
&#13;
.table {&#13;
    width: 100%;&#13;
    margin-top: 20px;&#13;
    border-collapse: collapse;&#13;
    text-align: left;&#13;
    font-size: 14px;&#13;
}&#13;
&#13;
.table th {&#13;
    background-color: #a9c52f;&#13;
    color: white;&#13;
    padding: 12px;&#13;
    text-align: center;&#13;
    font-size:16px;&#13;
}&#13;
&#13;
.table td {&#13;
    padding: 10px;&#13;
    border: 1px solid #ddd;&#13;
    text-align: center;&#13;
    font-size:16px;&#13;
}&#13;
&#13;
&#13;
.table tr:hover {&#13;
    background-color: #f1f1f1;&#13;
}&#13;
&#13;
&#13;
#searchEmp {&#13;
    background:white;&#13;
    color: black;&#13;
    font-size:20px;&#13;
    border-radius:10px;&#13;
    &#13;
    &#13;
}&#13;
#searchDate {&#13;
    background:white;&#13;
    color: black;&#13;
    font-size:20px;&#13;
    border-radius:10px;&#13;
    &#13;
    &#13;
}&#13;
&#13;
&#13;
@media screen and (max-width: 768px) {&#13;
    .table {&#13;
        font-size: 12px;&#13;
    }&#13;
    .form-control {&#13;
        max-width: 100%;&#13;
    }&#13;
}&#13;
.btn {&#13;
  margin-right:10px;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>piechart</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>Attendance_piechart_employee</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
    data.records = [];
    var grA = new GlideRecord('x_1596199_attend_attendance_data');
    // grA.addQuery('employee', gs.getUserID()); 
    grA.orderByDesc('sys_created_on');
    grA.query();

    function convertToIST(utcDateTime) {
        if (!utcDateTime) return "N/A";

        var gdt = new GlideDateTime(utcDateTime);
        gdt.addSeconds(19800);
        return gdt.getValue();
    }


    var count = 1;
    while (grA.next()) {
        var employeeName = "Unknown"; // Default if employee name is not found

        if (grA.employee) { // Check if employee field is populated
            var userGR = new GlideRecord('sys_user');
            if (userGR.get(grA.getValue('employee'))) {
                employeeName = userGR.getValue('name'); // Fetch Employee Name
            }
        }
        data.records.push({
            srNo: count++, // Increment serial number
            employee: employeeName,
            date: convertToIST(grA.getValue('sys_created_on')), // Convert created date to IST
            checkIn: convertToIST(grA.getValue('check_in_time')), // Convert check-in time to IST
            checkOut: convertToIST(grA.getValue('check_out_time')), // Convert check-out time to IST
            status: grA.getValue('status'), // Attendance status (Checked-in/Checked-out)
            totalHours: grA.getValue('total_hours')
        });
    }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>truptibidave02</sys_created_by>
        <sys_created_on>2025-03-06 05:45:51</sys_created_on>
        <sys_id>8ce18fa6c300221089cf1c377d013130</sys_id>
        <sys_mod_count>64</sys_mod_count>
        <sys_name>Attendance_piechart_employee</sys_name>
        <sys_package display_value="Attendance Management System" source="x_1596199_attend">e420f18dc32bd61089cf1c377d01311a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Attendance Management System">e420f18dc32bd61089cf1c377d01311a</sys_scope>
        <sys_update_name>sp_widget_8ce18fa6c300221089cf1c377d013130</sys_update_name>
        <sys_updated_by>truptibidave02</sys_updated_by>
        <sys_updated_on>2025-03-20 07:15:16</sys_updated_on>
        <template><![CDATA[<div class="table-responsive">
    <h3>Attendance Data Record</h3>

     <div class="form-group">
        <label for="searchEmp">Search by Employee:</label>
        <input type="emp" class="form-control-1" id="searchEmp" ng-model="c.searchEmp">
        <!--<button class="btn btn" ng-click="c.searchEmployee()">Search</button>-->
    </div>
    <div class="form-group">
        <label for="searchDate">Search by Date:</label>
        <input type="date" class="form-control" id="searchDate" ng-model="c.searchDate">
        <button class="btn btn" ng-click="c.searchAttendance()">Search</button>
        <button class="btn btn" ng-click="c.resetFilters()">Reset</button>
    </div> 
    
     
    <table class="table table-striped">
        <thead>
            <tr>
                <th>SR No.</th>
                <th>Employee</th>
                <th>Date</th>
                <th>Check-in Time</th>
                <th>Check-out Time</th>
                <th>Status</th>
              <th>Total Hours</th>
            </tr>
        </thead>
        <tbody>
            <!--<tr ng-repeat="record in data.records"> --!>
                <!--  <td>{{ record.date | date:'yyyy-MM-dd' }}</td> <!-- Format Date -->
                <tr ng-repeat="record in c.data.filteredRecords">
                <td>{{ record.srNo }}</td> 
                  <td>{{record.employee || Unknown}}</td>
                <td>{{ record.date.split(' ')[0] }}</td> 
                <td>{{ record.checkIn || "N/A" }}</td>
                <td>{{ record.checkOut || "N/A" }}</td>
                <td>{{ record.status }}</td>
                <td>{{record.totalHours}}</td>
            </tr>
        </tbody>
    </table>
</div>
]]></template>
    </sp_widget>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>8ce18fa6c300221089cf1c377d013130</id>
        <sys_created_by>truptibidave02</sys_created_by>
        <sys_created_on>2025-03-06 05:36:59</sys_created_on>
        <sys_id>6d554f26c300221089cf1c377d0131f8</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>truptibidave02</sys_updated_by>
        <sys_updated_on>2025-03-06 05:36:59</sys_updated_on>
        <table>sp_widget</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
